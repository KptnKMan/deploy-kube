# How to configure a kubeconfig YAML file:
# 4 sections are important here: "clusters", "users", "contexts", and "current-context"
# "clusters" lists all the clusters that you may have access to.
#   - You will need this to configure the access to the API endpoint of the cluster.
# "users" configures the user(s) that you will use for each cluster, and the users meta-data.
#   - Any user-level certs required need to be added here.
# "contexts" sets contextual cluster details, like your clusters default namespace and user to use when connecting.
#   - this binds together the user to cluster and sets contextual info.
# "current-context" sets the default context of the entire kubeconfig file.
#   - important because you do not specify which default cluster you are interacting with each time you make a command.
#   - set your context: kubectl config use-context <cluster>

# Merging a new kubeconfig file into your main kubeconfig:
# kubectl config view --kubeconfig=${path_module}/../../deploy-kube/config/kubeconfig

apiVersion: v1
kind: Config
current-context: ${cluster_name_short}-${key_type}@${cluster_domain}

clusters:
- cluster:
    certificate-authority: ${path_module}/../../deploy-kube/config/ssl/ca.pem
    server: https://${elb_name}:${api_server_secure_port}
  name: ${cluster_domain}

contexts:
- context:
    cluster: ${cluster_domain}
    namespace: default
    user: ${cluster_name_short}-${key_type}
  name: ${cluster_name_short}-${key_type}@${cluster_domain}

users:
- name: ${cluster_name_short}-${key_type}
  user:
    client-certificate: ${path_module}/../../deploy-kube/config/ssl/${key_type}.pem
    client-key: ${path_module}/../../deploy-kube/config/ssl/${key_type}.key
