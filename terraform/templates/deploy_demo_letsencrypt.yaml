# This is a customised demo, more details at:
# https://runnable.com/blog/how-to-use-lets-encrypt-on-kubernetes

---
# ------------------- letsencrypt Job ------------------- #
apiVersion: batch/v1
kind: Job
metadata:
  name: letsencrypt-job
  labels:
    app: letsencrypt
  namespace: ${namespace_public}
spec:
  template:
    metadata:
      name: letsencrypt
      labels:
        app: letsencrypt
    spec:
      containers:
      # Bash script that starts an http server and launches certbot
      # Fork of github.com/sjenning/kube-nginx-letsencrypt
      - image: quay.io/hiphipjorge/kube-nginx-letsencrypt:latest
        name: letsencrypt
        imagePullPolicy: Always
        ports:
        - name: letsencrypt
          containerPort: 80
        env:
        - name: DOMAINS
          value: ${url_letsencrypt}.${domain} # Domain you want to use. CHANGE ME!
        - name: EMAIL
          value: ${letsencrypt_email} # Your email. CHANGE ME!
        - name: SECRET
          value: ${letsencrypt_secret}
      restartPolicy: Never

---
# ------------------- letsencrypt Service ------------------- #
apiVersion: v1
kind: Service
metadata:
  name: letsencrypt
  namespace: ${namespace_public}
spec:
  selector:
    app: letsencrypt
  ports:
  - protocol: "TCP"
    port: 80

---
# ------------------- letsencrypt Secret ------------------- #
apiVersion: v1
kind: Secret
metadata:
  name: letsencrypt-certs
  namespace: ${namespace_public}
type: Opaque
# Create an empty secret (with no data) in order for the update to work

---
# ------------------- letsencrypt Ingress ------------------- #
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "kubernetes-demo-app-ingress-service"
  namespace: ${namespace_public}
spec:
  tls:
  - hosts:
    - kubernetes-letsencrypt.jorge.fail # Your host. CHANGE ME
    secretName: letsencrypt-certs # Name of the secret
  rules:

---
# ------------------- letsencrypt ConfigMap ------------------- #
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
...
    # Add upstream for letsencrypt job
    upstream letsencrypt {
      server letsencrypt:80 max_fails=0 fail_timeout=1s;
    }

    server {
      listen 80;
...
      # Redirect all traffic in /.well-known/ to letsencrypt
      location ^~ /.well-known/acme-challenge/ {
        proxy_pass http://letsencrypt;
      }
    }