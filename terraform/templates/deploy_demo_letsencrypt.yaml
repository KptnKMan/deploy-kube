# This is a customised demo, more details at:
# https://runnable.com/blog/how-to-use-lets-encrypt-on-kubernetes

---
# ------------------- nginx ConfigMap v1 ------------------- #
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: ${namespace_public}
data:
  default.conf: |
    server {
      listen 80;
      listen [::]:80;
      server_name  _;
      location / {
        add_header Content-Type text/plain; # Prevents download
        return 200 "Hello world! Kubernetes + Let's encrypt demo.";
      }
    }

# ---
# # ------------------- nginx ConfigMap v2 ------------------- #
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: nginx-config
#   namespace: ${namespace_public}
# data:
#   default.conf: |
#     # Add upstream for letsencrypt job
#     upstream letsencrypt {
#       server letsencrypt:80 max_fails=0 fail_timeout=1s;
#     }

#     server {
#       listen 80;
#       listen [::]:80;
#       server_name  _;
#       location / {
#         add_header Content-Type text/plain; # Prevents download
#         return 200 "Hello world! Kubernetes + Let's encrypt demo.";
#       }
#       # Redirect all traffic in /.well-known/ to letsencrypt
#       location ^~ /.well-known/acme-challenge/ {
#         proxy_pass http://letsencrypt;
#       }
#     }

---
# ------------------- nginx Deployment ------------------- #
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: ${namespace_public}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-configs
          mountPath: /etc/nginx/conf.d
      # Load the configuration files for nginx
      volumes:
        - name: nginx-configs
          configMap:
            name: nginx-config

---
# ------------------- nginx Service ------------------- #
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: ${namespace_public}
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - protocol: "TCP"
    port: 80
    nodePort: ${ingress_port_http}

---
# ------------------- nginx Ingress ------------------- #
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: "kubernetes-demo-app-ingress-service"
  namespace: ${namespace_public}
spec:
  tls:
  - hosts:
    - ${url_app}.${domain} # Your host. CHANGE ME
    secretName: letsencrypt-certs # Name of the secret
  rules:
  - host: ${url_app}.${domain} # CHANGE ME!
    http:
      paths:
      # The * is needed so that all traffic gets redirected to nginx
      - path: /*
        backend:
          serviceName: nginx
          servicePort: 80

---
# ------------------- letsencrypt Job ------------------- #
apiVersion: batch/v1
kind: Job
metadata:
  name: letsencrypt-job
  labels:
    app: letsencrypt
  namespace: ${namespace_public}
spec:
  template:
    metadata:
      name: letsencrypt
      labels:
        app: letsencrypt
    spec:
      containers:
      # Bash script that starts an http server and launches certbot
      # Fork of github.com/sjenning/kube-nginx-letsencrypt
      - image: quay.io/hiphipjorge/kube-nginx-letsencrypt:latest
        name: letsencrypt
        imagePullPolicy: Always
        ports:
        - name: letsencrypt
          containerPort: 80
        env:
        - name: DOMAINS
          value: ${url_app}.${domain} # Domain you want to use. CHANGE ME!
        - name: EMAIL
          value: ${letsencrypt_email} # Your email. CHANGE ME!
        - name: SECRET
          value: ${letsencrypt_secret}
      restartPolicy: Never

---
# ------------------- letsencrypt Service ------------------- #
apiVersion: v1
kind: Service
metadata:
  name: letsencrypt
  namespace: ${namespace_public}
spec:
  selector:
    app: letsencrypt
  ports:
  - protocol: "TCP"
    port: 80

---
# ------------------- letsencrypt Secret ------------------- #
apiVersion: v1
kind: Secret
metadata:
  name: letsencrypt-certs
  namespace: ${namespace_public}
type: Opaque
# Create an empty secret (with no data) in order for the update to work

# ---
# # ------------------- letsencrypt Ingress ------------------- #
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: "kubernetes-demo-app-ingress-service"
#   namespace: ${namespace_public}
# spec:
#   tls:
#   - hosts:
#     - kubernetes-letsencrypt.jorge.fail # Your host. CHANGE ME
#     secretName: letsencrypt-certs # Name of the secret
#   rules:

# ---
# # ------------------- letsencrypt ConfigMap ------------------- #
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: nginx-config
# data:
#   default.conf: |
# ...
#     # Add upstream for letsencrypt job
#     upstream letsencrypt {
#       server letsencrypt:80 max_fails=0 fail_timeout=1s;
#     }

#     server {
#       listen 80;
# ...
#       # Redirect all traffic in /.well-known/ to letsencrypt
#       location ^~ /.well-known/acme-challenge/ {
#         proxy_pass http://letsencrypt;
#       }
#     }